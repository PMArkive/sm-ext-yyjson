diff --git a/third_party/yyjson/yyjson.c b/third_party/yyjson/yyjson.c
index ad9cbd5..c6e9213 100644
--- a/third_party/yyjson/yyjson.c
+++ b/third_party/yyjson/yyjson.c
@@ -1759,11 +1759,63 @@ yyjson_doc *yyjson_mut_val_imut_copy(yyjson_mut_val *mval,
     return doc;
 }
 
-static_inline bool unsafe_yyjson_num_equals(void *lhs, void *rhs) {
-    yyjson_val_uni *luni = &((yyjson_val *)lhs)->uni;
-    yyjson_val_uni *runi = &((yyjson_val *)rhs)->uni;
+yyjson_api bool yyjson_equals_fp(double a, double b) {
+    // handle NaN cases first since NaN != NaN
+    if (isnan(a) || isnan(b)) return false;
+
+    // fast path for exact equality
+    // this also handles the case where both a and b are +0 or -0
+    // IEEE 754 guarantees that +0 == -0 is true
+    if (a == b) return true;
+
+    // handle infinity cases
+    if (isinf(a) || isinf(b)) {
+        return isinf(a) && isinf(b) && (a > 0) == (b > 0);
+    }
+
+    double diff = fabs(a - b);
+    if (diff <= 1e-15) return true;
+
+    double larger = fmax(fabs(a), fabs(b));
+    return diff <= larger * 1e-6;
+}
+
+yyjson_api bool yyjson_equals_fp_custom(double a, double b, double rel_epsilon, double abs_epsilon) {
+    // handle NaN cases first since NaN != NaN
+    if (isnan(a) || isnan(b)) return false;
+
+    // fast path for exact equality
+    // this also handles the case where both a and b are +0 or -0
+    // IEEE 754 guarantees that +0 == -0 is true
+    if (a == b) return true;
+
+    // handle infinity cases
+    if (isinf(a) || isinf(b)) {
+        return isinf(a) && isinf(b) && (a > 0) == (b > 0);
+    }
+
+    double diff = fabs(a - b);
+    if (diff <= abs_epsilon) return true;
+
+    double larger = fmax(fabs(a), fabs(b));
+    return diff <= larger * rel_epsilon;
+}
+
+static_inline bool unsafe_yyjson_num_equals(void* lhs, void* rhs) {
+    yyjson_val_uni* luni = &((yyjson_val*)lhs)->uni;
+    yyjson_val_uni* runi = &((yyjson_val*)rhs)->uni;
     yyjson_subtype lt = unsafe_yyjson_get_subtype(lhs);
     yyjson_subtype rt = unsafe_yyjson_get_subtype(rhs);
+
+    // if either is a float, use areClose to compare
+    if (lt == YYJSON_SUBTYPE_REAL || rt == YYJSON_SUBTYPE_REAL) {
+        return yyjson_equals_fp(
+            lt == YYJSON_SUBTYPE_REAL ? luni->f64 : (double)luni->i64,
+            rt == YYJSON_SUBTYPE_REAL ? runi->f64 : (double)runi->i64
+        );
+    }
+
+    // otherwise use the original comparison logic
     if (lt == rt) return luni->u64 == runi->u64;
     if (lt == YYJSON_SUBTYPE_SINT && rt == YYJSON_SUBTYPE_UINT) {
         return luni->i64 >= 0 && luni->u64 == runi->u64;
diff --git a/third_party/yyjson/yyjson.h b/third_party/yyjson/yyjson.h
index cbb0e0b..debdc6c 100644
--- a/third_party/yyjson/yyjson.h
+++ b/third_party/yyjson/yyjson.h
@@ -1833,6 +1833,26 @@ yyjson_api_inline bool yyjson_equals_strn(yyjson_val *val, const char *str,
         if the object level is too deep. */
 yyjson_api_inline bool yyjson_equals(yyjson_val *lhs, yyjson_val *rhs);
 
+/** Compare two floating-point numbers with default epsilon values.
+    This function uses both relative and absolute epsilon to handle edge cases.
+    @param a First floating-point number to compare.
+    @param b Second floating-point number to compare.
+    @return true if the numbers are considered equal, false otherwise.
+ */
+yyjson_api bool yyjson_equals_fp(double a, double b);
+
+/** Compare two floating-point numbers with custom epsilon values.
+    This function uses both relative and absolute epsilon to handle edge cases.
+    @param a First floating-point number to compare.
+    @param b Second floating-point number to compare.
+    @param rel_epsilon Relative epsilon for comparison (e.g., 1e-6).
+    @param abs_epsilon Absolute epsilon for comparison (e.g., 1e-15).
+    @return true if the numbers are considered equal, false otherwise.
+ */
+yyjson_api bool yyjson_equals_fp_custom(double a, double b,
+                                              double rel_epsilon,
+                                              double abs_epsilon);
+
 /** Set the value to raw.
     Returns false if input is NULL or `val` is object or array.
     @warning This will modify the `immutable` value, use with caution. */
